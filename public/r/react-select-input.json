{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "react-select-input",
  "type": "registry:ui",
  "title": "React Select",
  "description": "A customizable select component built with react-select that integrates seamlessly with shadcn/ui, supporting multi-select, form validation, and dynamic option creation.",
  "dependencies": [
    "react-select@5.10.1"
  ],
  "files": [
    {
      "path": "src/registry/react-select-input/react-select-input.tsx",
      "content": "\"use client\";\r\n\r\nimport { ComponentProps } from \"react\";\r\nimport { X, ChevronDown, Loader } from \"lucide-react\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  OptionsOrGroups,\r\n  GroupBase,\r\n  ClearIndicatorProps,\r\n  components,\r\n  DropdownIndicatorProps,\r\n  MultiValueRemoveProps,\r\n} from \"react-select\";\r\n\r\nconst Select = dynamic(() => import(\"react-select\"), { ssr: false });\r\n\r\nconst AsyncSelect = dynamic(() => import(\"react-select/async\"), { ssr: false });\r\n\r\nconst CreatableSelect = dynamic(() => import(\"react-select/creatable\"), {\r\n  ssr: false,\r\n});\r\n\r\nconst AsyncCreatableSelect = dynamic(\r\n  () => import(\"react-select/async-creatable\"),\r\n  {\r\n    ssr: false,\r\n  }\r\n);\r\n\r\ninterface MyOption {\r\n  [key: string]: unknown;\r\n}\r\ntype MyOptions = OptionsOrGroups<MyOption, GroupBase<MyOption>> | undefined;\r\ntype ReactSelectProps = ComponentProps<typeof Select>;\r\ntype ReactCreatableSelectProps = ComponentProps<typeof CreatableSelect>;\r\ntype ReactAsyncSelectProps = ComponentProps<typeof AsyncSelect>;\r\ntype ReactAsyncCreatableSelectProps = ComponentProps<\r\n  typeof AsyncCreatableSelect\r\n>;\r\n\r\nconst customClassNames = {\r\n  menuList: \"space-y-1\",\r\n  placeholder: \"text-muted-foreground\",\r\n  control:\r\n    \"focus-visible:ring-[3px] selection:bg-primary selection:text-primary-foreground rounded-md bg-transparent dark:bg-input/30 border border-input p-2 text-base shadow-xs transition-[color,box-shadow] focus-within:ring-[3px] focus-within:ring-ring/50 focus-within:border-ring max-h-32 overflow-y-scroll no-scrollbar \",\r\n  menu: \"bg-accent rounded-md px-4 py-2 shadow-md\",\r\n  clearIndicator:\r\n    \"text-destructive/50 hover:text-destructive/80 cursor-pointer\",\r\n  option: \"hover:bg-accent-foreground/50 p-1 rounded\",\r\n  selectedOption: \"bg-accent-foreground text-accent\",\r\n  dropdownIndicator: \"text-foreground/50 cursor-pointer\",\r\n  multiValue: \"bg-accent px-1 rounded-sm\",\r\n  valueContainer: \"flex gap-2\",\r\n  multiValueRemove: \"ml-1\",\r\n  groupHeading: \"text-sm text-muted-foreground\",\r\n  areaInvalid:\r\n    \"focus-visible:ring-destructive/20 border-destructive dark:ring-destructive/40 focus-within:ring-destructive/20 focus-within:border-destructive dark:focus-within:ring-destructive/40\",\r\n  areaValid: \"focus-visible:border-ring focus-visible:ring-ring/50\",\r\n  disabled: \"opacity-50 cursor-not-allowed pointer-events-none\",\r\n};\r\n\r\nfunction ReactSelect({\r\n  classNames = {},\r\n  options,\r\n  components = {},\r\n  ...selectProps\r\n}: ReactSelectProps) {\r\n  const {\r\n    menuList,\r\n    placeholder,\r\n    control,\r\n    menu,\r\n    clearIndicator,\r\n    option,\r\n    dropdownIndicator,\r\n    multiValue,\r\n    valueContainer,\r\n    multiValueRemove,\r\n    groupHeading,\r\n    ...otherClasses\r\n  } = classNames;\r\n\r\n  const {\r\n    ClearIndicator,\r\n    DropdownIndicator,\r\n    LoadingIndicator,\r\n    MultiValueRemove,\r\n    ...otherComponents\r\n  } = components;\r\n\r\n  return (\r\n    <Select\r\n      unstyled={true}\r\n      {...selectProps}\r\n      options={options}\r\n      components={{\r\n        ClearIndicator: ClearIndicator || CustomClearIndicator,\r\n        LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\r\n        DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\r\n        MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\r\n        ...otherComponents,\r\n      }}\r\n      classNames={{\r\n        control: (props) =>\r\n          cn(\r\n            customClassNames.control,\r\n            props?.selectProps?.[\"aria-invalid\"]\r\n              ? customClassNames.areaInvalid\r\n              : customClassNames.areaValid,\r\n            props.selectProps.isDisabled ? customClassNames.disabled : \"\",\r\n            control?.(props) && \"\"\r\n          ),\r\n        placeholder: (props) =>\r\n          cn(customClassNames.placeholder, placeholder?.(props) && \"\"),\r\n        menu: (props) => cn(customClassNames.menu, menu?.(props) && \"\"),\r\n        menuList: (props) =>\r\n          cn(customClassNames.menuList, menuList?.(props) && \"\"),\r\n        option: (props) =>\r\n          cn(\r\n            customClassNames.option,\r\n            props.isSelected ? customClassNames.selectedOption : \"\",\r\n            option?.(props) && \"\"\r\n          ),\r\n        dropdownIndicator: (props) =>\r\n          cn(\r\n            customClassNames.dropdownIndicator,\r\n            dropdownIndicator?.(props) && \"\"\r\n          ),\r\n        clearIndicator: (props) =>\r\n          cn(customClassNames.clearIndicator, clearIndicator?.(props) ?? \"\"),\r\n        valueContainer: (props) =>\r\n          cn(customClassNames.valueContainer, valueContainer?.(props) ?? \"\"),\r\n        multiValue: (props) =>\r\n          cn(customClassNames.multiValue, multiValue?.(props) ?? \"\"),\r\n        multiValueRemove: (props) =>\r\n          cn(customClassNames.multiValue, multiValueRemove?.(props) && \"\"),\r\n        groupHeading: (props) =>\r\n          cn(customClassNames.groupHeading, groupHeading?.(props) ?? \"\"),\r\n        ...otherClasses,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ReactAsyncSelect({\r\n  classNames = {},\r\n  options,\r\n  components = {},\r\n  ...selectProps\r\n}: ReactAsyncSelectProps) {\r\n  const {\r\n    menuList,\r\n    placeholder,\r\n    control,\r\n    menu,\r\n    clearIndicator,\r\n    option,\r\n    dropdownIndicator,\r\n    multiValue,\r\n    valueContainer,\r\n    multiValueRemove,\r\n    groupHeading,\r\n    ...otherClasses\r\n  } = classNames;\r\n\r\n  const {\r\n    ClearIndicator,\r\n    DropdownIndicator,\r\n    LoadingIndicator,\r\n    MultiValueRemove,\r\n    ...otherComponents\r\n  } = components;\r\n\r\n  return (\r\n    <AsyncSelect\r\n      unstyled={true}\r\n      {...selectProps}\r\n      options={options}\r\n      components={{\r\n        ClearIndicator: ClearIndicator || CustomClearIndicator,\r\n        LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\r\n        DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\r\n        MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\r\n        ...otherComponents,\r\n      }}\r\n      classNames={{\r\n        control: (props) =>\r\n          cn(\r\n            customClassNames.control,\r\n            props?.selectProps?.[\"aria-invalid\"]\r\n              ? customClassNames.areaInvalid\r\n              : customClassNames.areaValid,\r\n            props.selectProps.isDisabled ? customClassNames.disabled : \"\",\r\n            control?.(props) && \"\"\r\n          ),\r\n        placeholder: (props) =>\r\n          cn(customClassNames.placeholder, placeholder?.(props) && \"\"),\r\n        menu: (props) => cn(customClassNames.menu, menu?.(props) && \"\"),\r\n        menuList: (props) =>\r\n          cn(customClassNames.menuList, menuList?.(props) && \"\"),\r\n        option: (props) =>\r\n          cn(\r\n            customClassNames.option,\r\n            props.isSelected ? customClassNames.selectedOption : \"\",\r\n            option?.(props) && \"\"\r\n          ),\r\n        dropdownIndicator: (props) =>\r\n          cn(\r\n            customClassNames.dropdownIndicator,\r\n            dropdownIndicator?.(props) && \"\"\r\n          ),\r\n        clearIndicator: (props) =>\r\n          cn(customClassNames.clearIndicator, clearIndicator?.(props) ?? \"\"),\r\n        valueContainer: (props) =>\r\n          cn(customClassNames.valueContainer, valueContainer?.(props) ?? \"\"),\r\n        multiValue: (props) =>\r\n          cn(customClassNames.multiValue, multiValue?.(props) ?? \"\"),\r\n        multiValueRemove: (props) =>\r\n          cn(customClassNames.multiValue, multiValueRemove?.(props) && \"\"),\r\n        groupHeading: (props) =>\r\n          cn(customClassNames.groupHeading, groupHeading?.(props) ?? \"\"),\r\n        ...otherClasses,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ReactCreatableSelect({\r\n  classNames = {},\r\n  options,\r\n  components = {},\r\n  ...selectProps\r\n}: ReactCreatableSelectProps) {\r\n  const {\r\n    menuList,\r\n    placeholder,\r\n    control,\r\n    menu,\r\n    clearIndicator,\r\n    option,\r\n    dropdownIndicator,\r\n    multiValue,\r\n    valueContainer,\r\n    multiValueRemove,\r\n    groupHeading,\r\n    ...otherClasses\r\n  } = classNames;\r\n\r\n  const {\r\n    ClearIndicator,\r\n    DropdownIndicator,\r\n    LoadingIndicator,\r\n    MultiValueRemove,\r\n    ...otherComponents\r\n  } = components;\r\n\r\n  return (\r\n    <CreatableSelect\r\n      unstyled={true}\r\n      {...selectProps}\r\n      options={options}\r\n      components={{\r\n        ClearIndicator: ClearIndicator || CustomClearIndicator,\r\n        LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\r\n        DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\r\n        MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\r\n        ...otherComponents,\r\n      }}\r\n      classNames={{\r\n        control: (props) =>\r\n          cn(\r\n            customClassNames.control,\r\n            props?.selectProps?.[\"aria-invalid\"]\r\n              ? customClassNames.areaInvalid\r\n              : customClassNames.areaValid,\r\n            props.selectProps.isDisabled ? customClassNames.disabled : \"\",\r\n            control?.(props) && \"\"\r\n          ),\r\n        placeholder: (props) =>\r\n          cn(customClassNames.placeholder, placeholder?.(props) && \"\"),\r\n        menu: (props) => cn(customClassNames.menu, menu?.(props) && \"\"),\r\n        menuList: (props) =>\r\n          cn(customClassNames.menuList, menuList?.(props) && \"\"),\r\n        option: (props) =>\r\n          cn(\r\n            customClassNames.option,\r\n            props.isSelected ? customClassNames.selectedOption : \"\",\r\n            option?.(props) && \"\"\r\n          ),\r\n        dropdownIndicator: (props) =>\r\n          cn(\r\n            customClassNames.dropdownIndicator,\r\n            dropdownIndicator?.(props) && \"\"\r\n          ),\r\n        clearIndicator: (props) =>\r\n          cn(customClassNames.clearIndicator, clearIndicator?.(props) ?? \"\"),\r\n        valueContainer: (props) =>\r\n          cn(customClassNames.valueContainer, valueContainer?.(props) ?? \"\"),\r\n        multiValue: (props) =>\r\n          cn(customClassNames.multiValue, multiValue?.(props) ?? \"\"),\r\n        multiValueRemove: (props) =>\r\n          cn(customClassNames.multiValue, multiValueRemove?.(props) && \"\"),\r\n        groupHeading: (props) =>\r\n          cn(customClassNames.groupHeading, groupHeading?.(props) ?? \"\"),\r\n        ...otherClasses,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ReactAsyncCreatableSelect({\r\n  classNames = {},\r\n  options,\r\n  components = {},\r\n  ...selectProps\r\n}: ReactAsyncCreatableSelectProps) {\r\n  const {\r\n    menuList,\r\n    placeholder,\r\n    control,\r\n    menu,\r\n    clearIndicator,\r\n    option,\r\n    dropdownIndicator,\r\n    multiValue,\r\n    valueContainer,\r\n    multiValueRemove,\r\n    groupHeading,\r\n    ...otherClasses\r\n  } = classNames;\r\n\r\n  const {\r\n    ClearIndicator,\r\n    DropdownIndicator,\r\n    LoadingIndicator,\r\n    MultiValueRemove,\r\n    ...otherComponents\r\n  } = components;\r\n\r\n  return (\r\n    <AsyncCreatableSelect\r\n      unstyled={true}\r\n      {...selectProps}\r\n      options={options}\r\n      components={{\r\n        ClearIndicator: ClearIndicator || CustomClearIndicator,\r\n        LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\r\n        DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\r\n        MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\r\n        ...otherComponents,\r\n      }}\r\n      classNames={{\r\n        control: (props) =>\r\n          cn(\r\n            customClassNames.control,\r\n            props?.selectProps?.[\"aria-invalid\"]\r\n              ? customClassNames.areaInvalid\r\n              : customClassNames.areaValid,\r\n            props.selectProps.isDisabled ? customClassNames.disabled : \"\",\r\n            control?.(props) && \"\"\r\n          ),\r\n        placeholder: (props) =>\r\n          cn(customClassNames.placeholder, placeholder?.(props) && \"\"),\r\n        menu: (props) => cn(customClassNames.menu, menu?.(props) && \"\"),\r\n        menuList: (props) =>\r\n          cn(customClassNames.menuList, menuList?.(props) && \"\"),\r\n        option: (props) =>\r\n          cn(\r\n            customClassNames.option,\r\n            props.isSelected ? customClassNames.selectedOption : \"\",\r\n            option?.(props) && \"\"\r\n          ),\r\n        dropdownIndicator: (props) =>\r\n          cn(\r\n            customClassNames.dropdownIndicator,\r\n            dropdownIndicator?.(props) && \"\"\r\n          ),\r\n        clearIndicator: (props) =>\r\n          cn(customClassNames.clearIndicator, clearIndicator?.(props) ?? \"\"),\r\n        valueContainer: (props) =>\r\n          cn(customClassNames.valueContainer, valueContainer?.(props) ?? \"\"),\r\n        multiValue: (props) =>\r\n          cn(customClassNames.multiValue, multiValue?.(props) ?? \"\"),\r\n        multiValueRemove: (props) =>\r\n          cn(customClassNames.multiValue, multiValueRemove?.(props) && \"\"),\r\n        groupHeading: (props) =>\r\n          cn(customClassNames.groupHeading, groupHeading?.(props) ?? \"\"),\r\n        ...otherClasses,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n// custom components\r\nfunction CustomClearIndicator(props: ClearIndicatorProps) {\r\n  return (\r\n    <components.ClearIndicator {...props}>\r\n      <X size={18} />\r\n    </components.ClearIndicator>\r\n  );\r\n}\r\n\r\nfunction CustomDropdownIndicator(props: DropdownIndicatorProps) {\r\n  const { selectProps } = props;\r\n  return (\r\n    <components.DropdownIndicator {...props}>\r\n      <ChevronDown\r\n        size={18}\r\n        className={\r\n          \"transition-transform \" + (selectProps.menuIsOpen ? \"rotate-180\" : \"\")\r\n        }\r\n      />\r\n    </components.DropdownIndicator>\r\n  );\r\n}\r\n\r\nfunction CustomLoadingIndicator() {\r\n  return <Loader size={18} className=\"animate-spin\" />;\r\n}\r\n\r\nfunction CustomMultiValueRemove(props: MultiValueRemoveProps) {\r\n  return (\r\n    <components.MultiValueRemove {...props}>\r\n      <X size={14} className=\"hover:text-destructive cursor-pointer\" />\r\n    </components.MultiValueRemove>\r\n  );\r\n}\r\n\r\n// helper functions\r\nconst map = new Map();\r\n\r\nfunction flattenOptions(options: Exclude<MyOptions, undefined>): MyOption[] {\r\n  const jsonOptions = JSON.stringify(options);\r\n  if (map.has(jsonOptions)) {\r\n    return map.get(jsonOptions) as MyOption[];\r\n  }\r\n  const flatOptions = options.flatMap((option) =>\r\n    option.options ? option.options : option\r\n  );\r\n  map.set(jsonOptions, flatOptions);\r\n  return flatOptions as MyOption[];\r\n}\r\n\r\nfunction convertToOptions(\r\n  value: string[],\r\n  options: Exclude<MyOptions, undefined>,\r\n  valueField: string = \"value\"\r\n) {\r\n  const flatOptions = flattenOptions(options);\r\n  const selectedOptions = value.map((v) => {\r\n    return flatOptions.filter((o) => o[valueField] === v)[0];\r\n  });\r\n\r\n  return selectedOptions;\r\n}\r\n\r\nfunction convertToOption(\r\n  value: string,\r\n  options: Exclude<MyOptions, undefined>,\r\n  valueField: string = \"value\"\r\n) {\r\n  if (!value) {\r\n    return { [valueField]: \"\", label: \"\" };\r\n  }\r\n  const flatOptions = flattenOptions(options);\r\n  return flatOptions.filter((o) => o[valueField] === value)[0];\r\n}\r\n\r\nfunction getFields(field: string, selectedOptions: MyOption[] | undefined) {\r\n  if (selectedOptions) {\r\n    return selectedOptions.map((so) => so[field]);\r\n  }\r\n  return [];\r\n}\r\n\r\nexport {\r\n  ReactSelect,\r\n  ReactAsyncSelect,\r\n  ReactCreatableSelect,\r\n  ReactAsyncCreatableSelect,\r\n  convertToOptions,\r\n  getFields,\r\n  flattenOptions,\r\n  convertToOption,\r\n  type MyOption,\r\n  type MyOptions,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
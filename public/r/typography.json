{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typography",
  "type": "registry:ui",
  "title": "Typography",
  "description": "A comprehensive set of typography components including headings (H1-H6), paragraphs, blockquotes, code blocks, and text variants with responsive sizing and styling.",
  "files": [
    {
      "path": "src/registry/typography/typography.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { ReactNode, ComponentProps } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport function H1({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h1'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h1';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-center text-2xl sm:text-3xl md:text-4xl font-extrabold tracking-tight text-balance',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function H2({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h2'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h2';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 pb-2 text-xl sm:text-2xl md:text-3xl font-semibold tracking-tight',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function H3({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h3'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h3';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-lg sm:text-xl md:text-2xl font-semibold tracking-tight',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function H4({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h4'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h4';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base sm:text-lg md:text-xl font-semibold tracking-tight',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function H5({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h5'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h5';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base sm:text-lg md:text-xl font-semibold tracking-tight',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function H6({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h6'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h6';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base sm:text-lg md:text-xl font-semibold tracking-tight',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function P({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'p'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'p';\n  return (\n    <Comp\n      className={cn(\n        'leading-6 md:leading-7 text-sm sm:text-base [&:not(:first-child)]:mt-4 sm:[&:not(:first-child)]:mt-6',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function BlockQoute({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'blockquote'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'blockquote';\n  return (\n    <Comp\n      className={cn(\n        'mt-4 sm:mt-6 border-l-2 pl-4 sm:pl-6 text-sm sm:text-base italic',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Code({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'code'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'code';\n  return (\n    <Comp\n      className={cn(\n        'bg-muted relative rounded px-[0.2rem] sm:px-[0.3rem] py-[0.15rem] sm:py-[0.2rem] font-mono text-xs sm:text-sm font-semibold',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Lead({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn(\n        'text-muted-foreground text-lg sm:text-xl md:text-2xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Large({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-base sm:text-lg md:text-xl font-semibold', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Small({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-xs sm:text-sm leading-none font-medium', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Muted({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-muted-foreground text-xs sm:text-sm', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport function Title({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'div'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn(\n        'text-primary text-5xl sm:text-6xl md:text-7xl lg:text-8xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}